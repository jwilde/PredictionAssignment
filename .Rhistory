summary(linear)
linear2<-lm(mpg~as.factor(am)+wt, data=mtcars)
summary(linear2)
linear2<-lm(mpg~as.factor(am)+wt-1, data=mtcars)
summary(linear2)
linear2<-lm(mpg~as.factor(am)+cyl-1, data=mtcars)
summary(linear2)
cor(mtcars$am, mtcars$wt)
cor(mtcars$am, mtcars$cyl)
plot(mtcars$mpg~mtcars$wt)
plot(mtcars$mpg~mtcars$cyl)
plot(mtcars$mpg~mtcars$disp)
cor(mtcars$am, mtcars$disp)
lm(mpg~as.factor(am)+disp, data=mtcars)
linear2<-lm(mpg~as.factor(am)+disp, data=mtcars)
summary(linear23)
summary(linear2)
linear2<-lm(mpg~as.factor(am)*disp, data=mtcars)
summary(linear2)
linear2<-lm(mpg~as.factor(am)*wt, data=mtcars)
summary(linear2)
linear2<-lm(mpg~as.factor(am)+wt, data=mtcars)
summary(linear2)
resid(linear2)
plot(resid(linear2))
sumCoef <- summary(linear)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = linear$df) * sumCoef[2, 2]
sumCoef <- summary(linear2)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = linear2$df) * sumCoef[2, 2]
linear3<-lm(mpg~as.factor(am)+wt+disp)
linear3<-lm(mpg~as.factor(am)+wt+disp, data=mtcars)
summary(linear3)
linear3<-lm(mpg~as.factor(am)+wt+cyl, data=mtcars)
summary(linear3)
sumCoef <- summary(linear3)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = linear3$df) * sumCoef[2, 2]
plot(mtcars$wt, mtcars$am)
plot(mtcars$wt~mtcars$am)
plot(mtcars$wt~as.factor(mtcars$am))
plot(mtcars$mpg~mtcars$wt)
plot(mtcars$wt~as.factor(mtcars$am))
?plot
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
install.packages("caret")
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
install.packages("kernlab")
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
?createDataPartition
library(caret)
library(kernlab)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
training
dim(training)
dim(test)
dim(testing)
testIndex
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(concrete)
plot(CompressiveStrength)
plot(concetre$CompressiveStrength)
plot(concrete$CompressiveStrength)
library(Hmisc)
?cut2
dim(concrete)
cut2(concrete$CompressiveStrength, m=100)
strengh_cut<-cut2(concrete$CompressiveStrength, m=100)
plot(strength_cut)
plot(strengh_cut)
plot(concrete$CompressiveStrength, col=strengh_cut)
str(concrete)
plot(concrete$CompressiveStrength, col=conctrete$Cement)
plot(concrete$CompressiveStrength, col=concrete$Cement)
plot(concrete$CompressiveStrength, col=concrete$FlyAsh)
plot(concrete$CompressiveStrength, col=concrete$Water)
plot(concrete$CompressiveStrength, col=concrete$Superplasticizer)
plot(concrete$CompressiveStrength, col=concrete$FineAggregate)
plot(concrete$CompressiveStrength, col=concrete$Age)
plot(concrete$CompressiveStrength~concrete$Age)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
summary(concrete$Superplasticizer)
log(0)
hist(log(concrete$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
training = adData[ inTrain,]
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(adData)
library(dplyr)
training_pca<-select(training, IL_11, IL_13,IL_16, IL_17E, IL_1alpha ,IL_3, IL_4, IL_5, IL_6, IL_6_Receptor, IL_7, IL_8)
str(training_pcy)
str(training_pca)
prcomp(training_pca)
prcomp(training_pca)
preProcess(training_pca, method="pca")
preProc<-preProcess(training_pca, method="pca")
comp<-predict(preProc, training_pca)
comp
preProcess(training_pca, method="pca", pcaComp=9)
preProcess(training_pca, method="pca", tresh=0.8)
?preProcess
preProcess(training_pca, method="pca", thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_pca<-select(training, IL_11, IL_13,IL_16, IL_17E, IL_1alpha ,IL_3, IL_4, IL_5, IL_6, IL_6_Receptor, IL_7, IL_8, diagnosis)
model1<-train(training_pca$diagnosis~., method="glm", data=training_pca)
install.packages('e1071', dependencies=TRUE)
model1<-train(training_pca$diagnosis~., method="glm", data=training_pca)
str(training_pca)
model1<-train(training_pca$diagnosis ~ ., method="glm", data=training_pca)
model1<-train(diagnosis ~ ., method="glm", data=training_pca)
preProc<-preProcess(training_pca, method="pca", thresh = 0.8)
training_pca_wo<-select(training_pca, -diagnosis)
preProc<-preProcess(training_pca_wo, method="pca", thresh = 0.8)
predict?
?predict
?predict
?train
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
training_IL<-select(training, IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_6_Receptor, IL_7, IL_8, diagnosis)
training_wo<-select(training_IL, -diagnosis)
M<-abs(cor(training_wo))
diag(M)<-0
which(M>0.8, arr.ind=T)
which(M>0.7, arr.ind=T)
which(M>0.6, arr.ind=T)
preProc<-preProcess(training_wo, method="pca", thresh = 0.8)
spampred<-predict(preProc, training_wo)
model1<-traing(diagnosis~., method="glm", data=training_IL)
model1<-training(diagnosis~., method="glm", data=training_IL)
model1<-train(diagnosis~., method="glm", data=training_IL)
testing_wo<-select(testing, -diagnosis)
testPC<-predict(preProc, testing_wo)
confusionMatrix(testing$diagnosis, predict(model1, testPC))
str(testing)
str(testing_wo)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
training_IL<-select(training, IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6)
training_IL<-select(training, IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_6_Receptor, IL_7, IL_8)
str(training_IL)
training_IL<-select(training, IL_11, IL_13, IL_16, IL_17E, IL_1alpha, IL_3, IL_4, IL_5, IL_6, IL_6_Receptor, IL_7, IL_8, diagnosis)
model_WO<-train(diagnosis~.,method="glm", data=training_IL)
confusionMatrix(testing$diagnosis, predict(model_WO, testing))
training_IL[,-13]
preProc<-preProcess(training_IL[,-13], method="pca", thresh=0.8)
trainPC<-predict(preProc, training_IL[,-13])
model2<-train(diagnosis~., method="glm", data=trainPC)
model2<-train(training$diagnosis~., method="glm", data=trainPC)
model2<-train(training_IL$diagnosis~., method="glm", data=trainPC)
training_IL$diagnosis
trainPC
str(adData)
?adData
model_WO<-train(as.factor(diagnosis)~.,method="glm", data=training_IL)
confusionMatrix(testing$diagnosis, predict(model_WO, testing))
preProc<-preProcess(training_IL[,-13], method="pca", thresh=0.8)
trainPC<-predict(preProc, training_IL[,-13])
model2<-train(as.factor(training_IS$diagnosis)~., method="glm", data=trainPC)
model2<-train(as.factor(training_IL$diagnosis)~., method="glm", data=trainPC)
model2<-train(y=as.factor(training_IL$diagnosis), method="glm", x=trainPC)
str(testing)
str(testing[,-1])
testPC<-predict(preProc, testing[,-1])
confusionMatrix(testing$diagnosis, predict(model2, testPC))
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
install.packages("ElemStatLearning")
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(pgmm)
install.packages("pgmm")
library(rpart)
data(segmentationOriginal)
dim(segmentationOriginal)
inTrain<-createDataPartition(y=segmentationOriginal$Case, p=0.6, list=FALSE)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
set.seed(135)
set.seed(135)
set.seed(125)
model<-train(Case~., method="rpart", data=segmentationOriginal)
install.packages(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(model$finalModel)
model<-train(Case~., method="rpart", data=training)
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model$finalModel)
head(inTrain)
head(training)
model<-train(Case~., method="rpart", data=training)
print(model$finalModel)
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model$finalModel, model=TRUE)
fancyRpartPlot(model$finalModel)
plot(model$finalModel, uniform=TRUE)
text(model$finalModel, use.n=TRUE,all=TRUE, cex=0.8)
set.seed(125)
model<-train(Case~., method="rpart", data=training)
fancyRpartPlot(model$finalModel)
model<-train(Class~., method="rpart", data=training)
fancyRpartPlot(model$finalModel)
print(model)
print(model$finalModel)
data(olive)
olive = olive[,-1]
librar(pgmm)
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
inTrain<-createDataPartition(y=olive$Area, p=0.75, list=FALSE)
training<-olive[inTrain,]
testing<-olive[-inTrain,]
model3<-train(Area~., data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
pred<-predict(model3, newdata=newdata)
head(pred)
head(training)
head(olive, n=100)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
?SAheart
log_model<-glm(chd~acohol+obesity+tobacco+typea+ldl, data=trainSA, onset=age, family="binomial")
log_model<-glm(chd~alcohol+obesity+tobacco+typea+ldl, data=trainSA, onset=age, family="binomial")
log_model<-glm(chd~alcohol+obesity+tobacco+typea+ldl, data=trainSA, onset=trainSA$age, family="binomial")
log_model<-glm(chd+age~alcohol+obesity+tobacco+typea+ldl, data=trainSA, family="binomial")
log_model<-glm(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, family="binomial")
pred<-predict(log_model, data=testing)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
head(pred)
pred<-predict(log_model, data=testSA)
missClass(testSA$chd, pred)
predTrain<-predict(log_model, data=trainSA)
missClass(trainSA$chd, predTrain)
log_model<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, family="binomial", method="glm")
pred<-predict(log_model, data=testSA)
missClass(testSA$chd, pred)
predTrain<-predict(log_model, data=trainSA)
missClass(trainSA$chd, predTrain)
predTest<-predict(log_model, data=testSA[,-10])
missClass(testSA$chd, predTest)
log_model<-glm(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, family="binomial")
predTest<-predict(log_model, data=testSA[,-10])
missClass(testSA$chd, predTest)
data(vowel.train)
data(vowel.test)
View(trainSA)
head(vowel.test)
vowel.train<-mutate(vowel.train, y=as.factor(y))
vowel.test<-mutate(vowel.test, y=as.factor(y))
set.seed(33833)
random_forest<-train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(random_forest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
library(dplyr)
vowel.train<-mutate(vowel.train, y=as.factor(y))
vowel.test<-mutate(vowel.test, y=as.factor(y))
model1<-train(y~., data=vowel.train, method="rf")
library(caret)
model1<-train(y~., data=vowel.train, method="rf")
accury(vowel.test$y, predict(model1,newdata=vowel.test))
accuracy(vowel.test$y, predict(model1,newdata=vowel.test))
install.packages("quantmod")
library(quantmod)
accuracy(vowel.test$y, predict(model1,newdata=vowel.test))
install.packages("fcst")
install.packages("forecast")
library(forecast)
accuracy(vowel.test$y, predict(model1,newdata=vowel.test))
confusionMatrix(vowel.test$y, predict(model1,newdata=vowel.test))
set.seed(33833)
model1<-train(y~., data=vowel.train, method="rf")
confusionMatrix(vowel.test$y, predict(model1,newdata=vowel.test))
model2<-train(y~., data=vowel.train, method="gbm")
confusionMatrix(vowel.test$y, predict(model1,newdata=vowel.test))
confusionMatrix(vowel.test$y, predict(model2,newdata=vowel.test))
equals<-subset(vowel.test, predict(model2,newdata=vowel.test)==predict(model1,newdata=vowel.test))
confusionMatrix(equals$y, predict(model1, newdata=equals))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelrf<-train(diagnosis~., data=training, method="rf")
modellda<-train(diagnosis~., data=training, method="lda")
modelgbm<-train(diagnosis~., data=training, method="gbm")
pred1<-predict(modelrf, testing)
confusionMatrix(pred1, testing$diagnosis)
pred2<-predict(modellda, testing)
confusionMatrix(pred2, testing$diagnosis)
pred3<-predict(modelgbm, testing)
confusionMatrix(pred3, testing$diagnosis)
preddf<-data.frame(pred1,pred2,pred3, diagnosis=testing$diagnosis)
comb<-train(diagnosis~., data=preddf, method="rf")
confusionMatrix(preddf, testing$diagnosis)
pred4<-predict(comb, preddf)
confusionMatrix(pred4,preddf)
confusionMatrix(pred4,preddf$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred1, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
glmnet()
install.packages("gmlnet")
install.packages("glmnet")
set.seed(233)
?concrete
str(concrete)
model<-train(CompressiveStrength~., method="lasso", data=training)
?plot.enet
plot.enet(model)
plot.enet(model$finalModel)
plot(model$finalModel)
plot(model$finalModel, use.color=T)
plot.enet(model$finalModel, xvar="penalty")
model$finalModel
coef(model$finalModel)
model$finalModel$beta.pure
library(lubridate) # For year() function below
dat = read.csv("C:\Users\JWilde\OneDrive - BBF GmbH\DS\Specialization docs\Practical Machine Learning\gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("C:/Users/JWilde/OneDrive - BBF GmbH/DS/Specialization docs/Practical Machine Learning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fit<-bats(tstrain)
forecast(fit)
?forecast
str(training)
head(training)
?head
tail(training)
?ts
tstest<-ts(test$visitsTublr)
tstest<-ts(test$visitsTumblr)
tstest<-ts(testing$visitsTumblr)
forecast(tstest,model=fit)
str(testing)
?forecast
forecast(tstest,model=fit, h=20)
df<-data.frame(forecast(tstest, model=fit, h=235), testing$visitsTumblr)
head(df)
tail.df
tail(df)
df1<-mutate(df, true=(testing.visitsTumblr<=Hi.95 & visitsTumblr>=Lo.95))
df1<-mutate(df, true=(testing.visitsTumblr<=Hi.95 & testing.visitsTumblr>=Lo.95))
head(df1)
count(df1$true)
select(df1, true==TRUE)
subset(df1, true==TRUE)
nrow(subset(df1, true==TRUE))
225/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages('e1071', dependencies = TRUE)
install.packages("e1071", dependencies = TRUE)
library(e1071)
set.seed(325)
str(concrete)
fit<-svm(CompressiveStrength~.,data=training)
?predict
pred<-predict(testing$CompressiveStrength, fit)
pred<-predict(fit, testing[-9])
library(caret)
confusionMatrix(pred, testing$CompressiveStrength)
head(pred)
head(testing$CompressiveStrength)
pred<-predict(fit, newdata=testing[-9])
confusionMatrix(pred, testing$CompressiveStrength)
?RSME
??RSME
?rsme
??rsme
?RMSE
RMSE(pred, testing$CompressiveStrength)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model1<-train(diagnosis~., data=training, method="rf")
model2<-train(diagnosis~., data=training, method="lda")
model3<-train(diagnosis~., data=training, method="gbm")
predrf<-predict(model1, testing)
predlda<-predict(model2, testing)
predgbm<-predict(model3, testing)
pred<-data.frame(predrf, predlda, predgbm, diagnosis=testing$diagnosis)
comb<-train(diagnosis~., data=pred, method="rf")
pred<-predict(comb, pred)
confusionMatrix((preddf, testing$diagnosis))
confusionMatrix(preddf, testing$diagnosis)
head(preddf)
confusionMatrix(predrf, testing$diagnosis)
confusionMatrix(predrlda, testing$diagnosis)
confusionMatrix(predlda, testing$diagnosis)
confusionMatrix(predgbm, testing$diagnosis)
confusionMatrix(pred, testing$diagnosis)
setwd("C:/Users/JWilde/priv-repos/PredictionAssignment")
